$(document).ready(function () {
  // share social

  // Lấy đường link hiện tại
  var currentUrl = window.location.href;

  // Tạo liên kết chia sẻ đến Facebook
  var fbShareUrl = "https://www.facebook.com/sharer/sharer.php?u=" + currentUrl;
  const twitterUrl = `https://twitter.com/intent/tweet?url=${encodeURIComponent(
    currentUrl
  )}`;
  // Gán sự kiện click cho nút button
  document.getElementById("twiter").addEventListener("click", function () {
    // Mở trang chia sẻ của Facebook trong cửa sổ mới
    window.open(twitterUrl, "_blank");
  });

  document.getElementById("fb").addEventListener("click", function () {
    // Mở trang chia sẻ của Facebook trong cửa sổ mới
    window.open(fbShareUrl, "_blank");
  });

  document.getElementById("link-copy").addEventListener("click", function () {
    // Mở trang chia sẻ của Facebook trong cửa sổ mới
    const textarea = document.createElement("textarea");
    textarea.value = currentUrl;
    document.body.appendChild(textarea);
    textarea.select();
    document.execCommand("copy");
    document.body.removeChild(textarea);
    alert("Đã sao chép đường dẫn");
  });

  // get province
  async function fetchAsync(url) {
    let response = await fetch(url);
    let data = await response.json();
    return data;
  }
  fetchAsync("https://provinces.open-api.vn/api/").then((data) => {
    if (data) {
      let ulList = document.querySelectorAll(".city");
      ulList.forEach((ul) => {
        for (const province of data) {
          const li = document.createElement("li");
          const content = document.createTextNode(province?.name);
          li.setAttribute("value", province?.name);
          li.appendChild(content);
          ul.appendChild(li);
        }
        dropdpow = ul.closest(".px-dropdown");
      });
      initpXDropdown();
    }
  });

  // get old /// Owr ddaau đáng lẽ phải chạy initpXDropdown(); sau khi render Li tuy nhiên
  // đnag trick k cần vì thằng old range k call api nên xong trước. thằng kia init 1 lần luôn
  oldRangeList = [
    { name: "Từ 15 đến 19 tuổi", value: "Từ 15 đến 19 tuổi" },
    { name: "Từ 20 đến 24 tuổi", value: "Từ 20 đến 24 tuổi" },
    { name: "Từ 25 đến 29 tuổi", value: "Từ 25 đến 29 tuổi" },
    { name: "Từ 30 đến 34 tuổi", value: "Từ 30 đến 34 tuổi" },
    { name: "Từ 35 đến 39 tuổi", value: "Từ 35 đến 39 tuổi" },
    { name: "Từ 40 đến 44 tuổi", value: "Từ 40 đến 44 tuổi" },
    { name: "Từ 45 đến 49 tuổi", value: "Từ 45 đến 49 tuổi" },
    { name: "Từ 50 đến 54 tuổi", value: "Từ 50 đến 54 tuổi" },
    { name: "Từ 55 đến 59 tuổi", value: "Từ 55 đến 59 tuổi" },
    { name: "Từ 60 đến 65 tuổi", value: "Từ 60 đến 65 tuổi" },
    { name: "Trên 65 tuổi", value: "Trên 65 tuổi" },
  ];
  let ulList = document.querySelectorAll(".old-range");
  ulList.forEach((ul) => {
    for (const old of oldRangeList) {
      const li = document.createElement("li");
      const content = document.createTextNode(old?.name);
      li.setAttribute("value", old?.name);
      li.appendChild(content);
      ul.appendChild(li);
    }
  });

  // navigation.forEach((element) => {
  //   console.log(element.getAttribute("section_1"));
  // });

  // ---------------check to checkbox to view more answer--------------------

  // get  all checkbox

  listMoreAnsCheckboxs = document.querySelectorAll(".more-ans-check-box");

  for (const checkbox of listMoreAnsCheckboxs) {
    formGroup = checkbox.closest(".form-group");
    const input = formGroup.querySelector(".more-ans-input");
    checkbox.addEventListener("change", (event) => {
      console.log("change");
      //get form từ checkbox
      if (event.currentTarget.checked) {
        if (canChecked(event.currentTarget)) {
          input.focus();
          input.select();
        }
      } else {
        input.value = "";
        // counter.style.display = "none";
      }
    });
    input.onclick = function () {
      if (canChecked(checkbox)) {
        checkbox.checked = true;
      }
    };
  }

  // ---------------check to checkbox to view more answer--------------------

  // get  all radio
  let listAllRadioOnpage = document.querySelectorAll("input[type='radio']");
  listMoreAnsRadios = document.querySelectorAll(".more-ans-radio");

  for (const radio of listAllRadioOnpage) {
    formGroup = radio.closest(".form-group");
    const input = formGroup.querySelector(".more-ans-input");
    radio.addEventListener("change", (event) => {
      // //get form từ radio input
      // if (event.currentTarget.checked) {
      //   input.focus();
      //   input.select();
      // } else {
      //   input.value = "";
      //   // counter.style.display = "none";
      // }
      if (radio.value == "more-ans") {
        input.focus();
        input.select();
      } else {
        if (input) {
          input.value = "";
        }
      }
    });
    //Thêm sự kiện khi click vào textArea sẽ tự checkRadio
    if (input) {
      input.onclick = function () {
        radio.checked = true;
      };
    }
  }

  // ----------------xử lí count kí tự----------------
  //get all textarea
  listTextArea = document.querySelectorAll("textarea");

  for (const textArea of listTextArea) {
    textArea.addEventListener("input", (event) => {
      paragrapLength = textArea.value.length;
      // get cha
      parent = textArea.closest(".form-group");
      // get và update thằng count
      counter = parent.querySelector(".counter");
      counter.firstChild.data = paragrapLength;
      if (paragrapLength == 1000) {
        counter.classList.add("counter-max");
      } else {
        counter.classList.remove("counter-max");
      }
    });
  }
  // Xử lí max and min select option
  let listAllCheckBoxOnPage = document.querySelectorAll(
    "input[type='checkbox']"
  );
  for (var i = 0; i < listAllCheckBoxOnPage.length; i++) {
    listAllCheckBoxOnPage[i].addEventListener("change", (event) => {
      //Check group của thằng này (thừa thiếu )
      if (event.target.checked) {
        if (!canChecked(event.target)) {
          event.target.checked = false;
        }
      }
    });
  }
});

//Check group của thằng checkbox đủ select chưa (get cha nó rồi ra đếm con)
let canChecked = (inputEle) => {
  console.log(inputEle);
  // get parent
  formGroup = inputEle.closest(".form-group");
  listCheckBox = formGroup.querySelectorAll("input[type='checkbox']");
  let count = 0;
  let max = formGroup.getAttribute("numberSelected");
  for (const input of listCheckBox) {
    if (input.checked) {
      console.log(input);
      count++;
    }
  }
  console.log(count);
  if (count <= max) {
    return true;
  } else {
    console.log("kodc");
    return false;
  }
};

// js trên Selecte input trên mạng
// src https://codepen.io/mftaskin/pen/qBoGgdZ
const initpXDropdown = () => {
  const dropdownElements = document.querySelectorAll(".px-dropdown");
  window.addEventListener("click", () => {
    dropdownElements.forEach((item) => {
      item.classList.remove("active");
    });
  });
  dropdownElements.forEach((item) => {
    const dropdownValue = item.querySelector(".px-dropdown-value");
    const dropdownInput = item.querySelector(".px-dropdown-input");
    const dropdownPanelOptions = item.querySelectorAll(
      ".px-dropdown-panel ul li"
    );
    dropdownInput?.addEventListener("click", (event) => {
      event.stopPropagation();
      item.classList.toggle("active");
    });
    dropdownPanelOptions.forEach((dropdownPanelOptionItem) => {
      dropdownPanelOptionItem.addEventListener("click", (e) => {
        dropdownInput.querySelector("input").value =
          dropdownPanelOptionItem.innerHTML;
        dropdownValue.value =
          dropdownPanelOptionItem.getAttribute("data-value");
        // Đã click chọn thì xóa thông báo
        // tìm cha chung vs thằng mess là (px-dropdown)
        formGroup = e.target.closest(".form-group");
        if (formGroup.classList.contains("invalid")) {
          formGroup.classList.remove("invalid");
          var messageElement = formGroup.querySelector(".form-message");
          if (messageElement) {
            messageElement.innerText = "";
          }
        }
      });
    });
  });
};

function Validator(formSelector) {
  // get parent
  var getParent = (currentElement, selector) => {
    // Nếu cha gần nhất ko phải element cần tìm thì tìm ra ngoài tiếp

    while (currentElement.parentElement) {
      if (currentElement.parentElement.matches(selector)) {
        return currentElement.parentElement;
      }
      currentElement = currentElement.parentElement;
    }
  };

  var formElement = document.querySelector(formSelector);

  // ------------------- Input và Select bình thường ----------------------
  // form rules la nhung rule se duoc xai trong form khi form khai bao
  var formRules = {};

  //Khai bao san cac function handle validation
  var validatiorRules = {
    required: function (value) {
      // return value ? undefined : "vui long nhap";
      return value == "" ? "Vui lòng nhập" : undefined;
    },
    email: (value) => {
      var regex = /^\w+([\.-]?\w+)*@\w+([\.-]?\w+)*(\.\w{2,3})+$/;
      return regex.test(value) ? undefined : "Email không hợp lệ";
    },
    min: (min) => {
      return function (value) {
        return value.length >= min ? undefined : `min is ${min}`;
      };
    },
    phone: (value) => {
      var regex = /^[\+]?[(]?[0-9]{3}[)]?[-\s\.]?[0-9]{3}[-\s\.]?[0-9]{4,6}$/im;
      return regex.test(value) ? undefined : "phone k hop le";
    },
  };
  if (formElement) {
    // get all input
    var inputs = formElement.querySelectorAll("[name][rules]");

    // create rules
    // not pass => return message
    // pass => undefined

    // get rules to object
    for (var input of inputs) {
      var rules = input.getAttribute("rules").split("|");
      var ruleInfo;
      for (var rule of rules) {
        var isRulehasValue = rule.includes(":");
        if (isRulehasValue) {
          ruleInfo = rule.split(":");
          rule = ruleInfo[0];
        }
        var ruleFunction = validatiorRules[rule];
        if (isRulehasValue) {
          ruleFunction = validatiorRules[rule](ruleInfo[1]);
        }
        // console.log(rule);
        if (Array.isArray(formRules[input.name])) {
          formRules[input.name].push(ruleFunction);
        } else {
          formRules[input.name] = [ruleFunction];
        }
      }

      // lang nghe su kien de validate (blur,change)
      input.onblur = handleValidate;
      // Khi đã báo lỗi và bấm dô nhập thì xóa đi nào blur mới check lại
      input.oninput = handleClearError;
    }
  }

  listCurrentError = [];
  // lưu id của form để kéo tới nơi

  // ---------------------ham thuc hien validate--------------------
  function handleValidate(event) {
    // setTimeout(() => {
    var rules = formRules[event.target.name];

    var errorMessage = "";

    for (var rule of rules) {
      // console.log(event.target.value);
      errorMessage = rule(event.target.value);
      if (errorMessage) break;
    }
    // neu co loi thi hien thi ra
    if (errorMessage) {
      // laays thang cha
      var formGroup = getParent(event.target, ".form-group");

      listCurrentError.push(formGroup.id);
      // tim thang connn
      if (formGroup) {
        // add class invalid zo cai formGroup  de xu li gi ẩn hiện thằng span lỗi
        formGroup.classList.add("invalid");
        var messageElement = formGroup.querySelector(".form-message");
        if (messageElement) {
          messageElement.innerText = errorMessage;
        }
      }
    }

    return !errorMessage;
    // }, );
  }

  function handleClearError(event) {
    var formGroup = getParent(event.target, ".form-group");
    if (formGroup.classList.contains("invalid")) {
      formGroup.classList.remove("invalid");
      var messageElement = formGroup.querySelector(".form-message");
      if (messageElement) {
        messageElement.innerText = "";
      }
    }
  }

  // ----------------- Radio group -------------------------

  // hàm check required

  const checkAllGroupRadio = (sectionId = "") => {
    currentSection = document.getElementById(sectionId);

    radioGroupOfCurrentSection = currentSection.querySelectorAll(
      "[name][groupRadioRules]"
    );
    let isCheckedAll = true;

    for (const group of radioGroupOfCurrentSection) {
      if (!checkRequired(group)) {
        isCheckedAll = false;
        listCurrentError.push(group.id);
      }
    }
    return isCheckedAll;
  };

  const checkRequired = (group) => {
    let value = group.querySelector(
      `input[name="${group.getAttribute("name")}"]:checked`
    )?.value;

    if (value) {
      // Da click

      return true;
    } else {
      // thong bao chua click
      group.classList.add("invalid");
      var messageElement = group.querySelector(".form-message");
      if (messageElement) {
        messageElement.innerText = "Vui lòng chọn";
      }

      return false;
    }
  };

  // get all radio group
  radioGroup = formElement.querySelectorAll("[name][groupRadioRules]");
  // xóa message khi đã check radio
  for (const group of radioGroup) {
    // get hết các nút trong group
    listInputRadio = group.querySelectorAll("input");
    //thêm sự kiện khi click cho từng input radio
    for (const input of listInputRadio) {
      input.onclick = function () {
        // xử lí xóa message
        if (group.classList.contains("invalid")) {
          group.classList.remove("invalid");
          var messageElement = group.querySelector(".form-message");
          if (messageElement) {
            messageElement.innerText = "";
          }
        }
      };
    }
  }

  // ----------------- checkbox group -------------------------

  // hàm check required

  const checkAllGroupCheckbox = (sectionId = "") => {
    currentSection = document.getElementById(sectionId);
    checkBoxGroupOfCurrentSection = currentSection.querySelectorAll(
      "[name][groupCheckboxRules]"
    );
    let isCheckedAll = true;
    for (const group of checkBoxGroupOfCurrentSection) {
      if (!checkRequiredCheckBox(group)) {
        listCurrentError.push(group.id);
        isCheckedAll = false;
      }
    }
    return isCheckedAll;
  };

  const checkRequiredCheckBox = (group) => {
    // list mayas cái đã được check
    let listChecked = group.querySelectorAll(
      `input[name="${group.getAttribute("name")}"]:checked`
    );

    if (listChecked.length > 0) {
      // Da click
      return true;
    } else {
      // Chua click, ban thong bao ra (check box)
      group.classList.add("invalid");
      var messageElement = group.querySelector(".form-message");
      if (messageElement) {
        messageElement.innerText = "Vui lòng chọn";
      }

      return false;
    }
  };

  // get all checkbox group
  let checkboxGroup = formElement.querySelectorAll(
    "[name][groupCheckboxRules]"
  );
  // xóa message khi đã check radio
  for (const group of checkboxGroup) {
    // get hết các nút trong group
    listInputRadio = group.querySelectorAll("input");
    //thêm sự kiện khi click cho từng input radio
    for (const input of listInputRadio) {
      input.onclick = function () {
        // xử lí xóa message
        if (group.classList.contains("invalid")) {
          group.classList.remove("invalid");
          var messageElement = group.querySelector(".form-message");
          if (messageElement) {
            messageElement.innerText = "";
          }
        }
      };
    }
  }
  //----------------------------------------------------------

  // Xử lí max length

  // xử lí hành vi submit form
  formElement.onsubmit = function (event) {
    event.preventDefault();

    let isValid = true;

    // input bt + select
    // var inputs = formElement.querySelectorAll("[name][rules]");

    // for (var input of inputs) {
    //   if (!handleValidate({ target: input })) {
    //     // console.log("co thang false");
    //     isValid = false;
    //   }
    // }

    // group radio

    // if (!checkAllGroupRadio()) {
    //   isValid = false;
    // }

    // group checkbox

    // if (!checkAllGroupCheckbox()) {
    //   isValid = false;
    // }

    if (isValid) {
      console.log("trueeeeeeeeeeeeeeeeeeeeeeee");
      sendPostRequest();
    } else {
      // scrollToInvalidFormGroup();
    }
  };

  scrollToInvalidFormGroup = () => {
    // sort lai truoc
    sorted = listCurrentError.sort();
    console.log(sorted);
    if (sorted.length > 0) {
      card = document.getElementById(sorted[0]).closest(".card");

      itemHasScroll = card.scrollIntoView({
        behavior: "smooth",
      });
    }
  };

  const sendPostRequest = async () => {
    var bodyFormData = new FormData();
    var data2 = {};
    //---------------------get data radio--------------
    // + get all radio group
    let radioGroups = formElement.querySelectorAll("[name][groupRadioRules]");

    for (const radioGroup of radioGroups) {
      pNode = radioGroup.querySelector(".question");
      console.log(pNode.getAttribute("p_key"));
      let value = radioGroup.querySelector(
        `input[name="${radioGroup.getAttribute("name")}"]:checked`
      )?.value;
      data2[`${pNode.innerText}`] = value;
    }
    //-----------get checkbox---------------------
    //  + get all checkbox group
    let checkboxGroups = formElement.querySelectorAll(
      "[name][groupCheckboxRules]"
    );

    for (const checkboxGroup of checkboxGroups) {
      let value = "";
      pNode = checkboxGroup.querySelector(".question");

      //get data cua checkbox
      listChecked = checkboxGroup.querySelectorAll(
        `input[name="${checkboxGroup.getAttribute("name")}"]:checked`
      );
      for (const checked of listChecked) {
        if (checked.value != "more-ans") {
          value += `-${checked.value}\n`;
        } else {
          //get data input more-ans
          let input_more_ans = checkboxGroup.querySelector(".more-ans-input");
          value += `-${input_more_ans.value}\n`;
        }
      }
      data2[`${pNode.textContent}`] = value;
      // bodyFormData.append(`data[${pNode?.innerText.trim()}]`, value);
    }
    //--------------------get input and select---------------------
    // get all input
    var inputs = formElement.querySelectorAll("[name][rules]");
    for (const input of inputs) {
      // Đầu tiên tìm form-group trước thì mới tìm được <p></p> vì là cha chung
      let form_group = input.closest(".form-group");
      let pNode = form_group.querySelector(".question");
      // console.log(pNode.innerText);
      let value = input.value;
      console.log(pNode.textContent.trim());
      data2[`${pNode.innerText.trim()}`] = value;
    }

    //--------------------Text area---------------------
    // get all text area
    var inputs = formElement.querySelectorAll(".text-area textarea");
    for (const input of inputs) {
      // Đầu tiên tìm form-group trước thì mới tìm được <p></p> vì là cha chung
      let form_group = input.closest(".form-group");
      let pNode = form_group.querySelector(".question");
      // console.log(pNode.innerText);
      let value = input.value;
      bodyFormData.append(`data[${pNode.innerText}]`, value);
      data2[`${pNode.textContent.replace(/\n/g, "")}`] = value;
    }

    // Display the key/value pairs
    // for (var pair of bodyFormData.entries()) {
    //   console.log(pair[0] + ", " + pair[1]);
    // }
    console.log(data2);
    // console.log(bodyFormData);

    // postData(
    //   "https://script.google.com/macros/s/AKfycbwzTJW5_Whr3aXl7NGuLV4cQNxPrg-yQ-QKUQx5s4gMwVLe_IT3IMAYeBlAR7C3rw8o/exec",
    //   data
    // );

    postData(
      "https://script.google.com/macros/s/AKfycbxfLP7Q43x5aWl6dVOfDObuxaBsTCol_xIC_fh2CLJZZnwAMkCZFuEfrMHnPbBenD8O/exec",
      data2
    );
  };

  finalValidation = (sectionId) => {
    // vì sẽ validation mỗi section riêng nên giờ phải truyền sectionId
    let isValid = true;

    currentSection = document.getElementById(sectionId);

    // input bt + select
    var inputs = currentSection.querySelectorAll("[name][rules]");

    for (var input of inputs) {
      console.log(input);
      if (!handleValidate({ target: input })) {
        // console.log("co thang false");
        isValid = false;
      }
    }

    // group radio

    if (!checkAllGroupRadio(sectionId)) {
      isValid = false;
    }

    // group checkbox

    if (!checkAllGroupCheckbox(sectionId)) {
      isValid = false;
    }
    if (isValid) {
      return true;
    } else {
      scrollToInvalidFormGroup();
      return false;
    }
  };
}

// api post data
async function postData(url, data) {
  axios({
    method: "POST",
    url,
    data: data,
    headers: {
      "Content-Type": "multipart/form-data;",
    },
  })
    .then(function (response) {
      //handle success
      if (response.status === 201 || response.status === 200) {
        Swal.fire({
          icon: "success",
          title: "Oops...",
          text: "Something went wrong!",
        });
      } else {
        // not ok
        Swal.fire({
          icon: "error",
          title: "Đã sảy ra lỗi gì đó...",
          text: "Vui lòng thử lại sau!",
        });
      }
    })
    .catch(function (response) {
      //handle error
      console.log(response);
    });
}

// document.getElementById("sweet").addEventListener("click", function () {
//   Swal.fire({
//     icon: "success",
//     title: "Oops...",
//     text: "Something went wrong!",
//   });
// });

function check_cookie_name(name) {
  // console.log("document.cookie", document.cookie);
  var match = document.cookie.match(new RegExp("(^| )" + name + "=([^;]+)"));
  if (match) {
    console.log(match[2]);
  } else {
    console.log("--something went wrong---");
  }
}

// Xử lí chuyển trang --------------------------------------------------------------

// array config navigation of question
navigation = {
  section_1: {
    question_nav: {
      "q-9-1": "section_1_1",
      "q-9-2": "section_1_3",
      "q-9-3": "section_1_3",
      "q-9-4": "section_1_3",
      "q-9-5": "section_1_3",
      "q-9-6": "section_1_3",
      "q-9-7": "section_1_3",
      "q-9-8": "section_1_2 ",
      "q-9-9": "section_1_2",
      "q-9-10": "section_1_3",
    },
  },
  section_1_1: {
    core_nav: {
      next: "section_2",
    },
  },
  section_1_2: {
    core_nav: {
      next: "section_2",
    },
  },
  section_2: {
    core_nav: {
      next: "final",
    },
  },
};

logNavi = ["section_1"];

const changePage = (type, targetSectionId, currentSectionId) => {
  // console.log(document.getElementById(targetSection).getAttribute("isGet"));
  if (type === "next") {
    // ẩn hiện
    targetSection = document.getElementById(targetSectionId);
    console.log(targetSection);
    targetSection.classList.remove("d-none");
    currentSection = document.getElementById(currentSectionId);
    console.log(currentSection);
    currentSection.classList.add("d-none");
    // đánh dấu isGet để lấy data
    targetSection.setAttribute("isGet", true);
  } else {
    // ẩn hiện
    targetSection = document.getElementById(targetSectionId);
    console.log(targetSection);
    targetSection.classList.remove("d-none");
    currentSection = document.getElementById(currentSectionId);
    currentSection.classList.add("d-none");
    // đánh dấu isGet để lấy data
    currentSection.setAttribute("isGet", false);
  }
};

let findTargetSectionIdNext = () => {
  // this func using to fint next section
  // get current section
  let currentSectionId = "";
  currentSectionId = logNavi[logNavi.length - 1];
  currentSection = document.getElementById(currentSectionId);
  // get formgroup has question navigation
  formGroup = currentSection.querySelector(".question_nav");
  let selected = formGroup?.querySelector(
    `input[name="${formGroup.getAttribute("name")}"]:checked`
  )?.id;

  let targetSection;
  type_nav = navigation[currentSectionId];
  console.log(type_nav);
  // nếu selected k có nghĩa là section đó không có question-nav
  // nên sẽ có core_nav
  if (selected) {
    targetSection = type_nav.question_nav[selected];
  } else {
    if (type_nav?.core_nav?.next != "final") {
      targetSection = type_nav?.core_nav?.next;
    } else {
      // Đã là cuối rồi
      targetSection = "final";
    }
  }

  return targetSection;
};

let findTargetSectionIdPre = () => {
  // this func using to find pre section
  let preSectionId = "";
  if (logNavi.length >= 2) {
    preSectionId = logNavi[logNavi.length - 2];
  } else {
    preSectionId = logNavi[logNavi.length - 1];
  }
  return preSectionId;
};

nextSection = () => {
  //bấm next thì set thằng list lỗi về rỗng để thêm lại từ đầu
  listCurrentError = [];
  targetSectionId = findTargetSectionIdNext();
  currentSectionId = logNavi[logNavi.length - 1];
  // check Validate truoc
  if (!finalValidation(currentSectionId)) {
    // hiện thông báo invalid
    // alert("chưa điền xong kìa");
  } else {
    // nếu next mà k có thì nghĩa đang là cuối targetSectionId = ""
    if (targetSectionId != "final") {
      changePage("next", targetSectionId, currentSectionId);
      // add log after change section
      logNavi.push(targetSectionId);
    }
  }
};

prevSection = () => {
  //Delete Data of current section
  targetSectionId = findTargetSectionIdPre();
  // console.log(targetSection);
  currentSectionId = logNavi[logNavi.length - 1];
  changePage("pre", targetSectionId, currentSectionId);
  // remove log after change section
  logNavi.pop();
};

document.querySelector("#btn-nav-next").onclick = () => {
  nextSection();
};

document.querySelector("#btn-nav-back").onclick = () => {
  prevSection();
};
